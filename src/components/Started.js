import React, { useState, useEffect, useRef, useCallback } from 'react';
import io from 'socket.io-client';
import Header from './Header';
import './Started.css';
import './Feedback.css';
import SupportChat from './SupportChat';
import AddPrinter from './AddPrinter';
import Mod from "../img/Model-Test.stl";
import Cookies from 'js-cookie';

const Started = () => {
  const [socket, setSocket] = useState(null);
  const [printers, setPrinters] = useState([]);
  const [selectedPrinter, setSelectedPrinter] = useState('');
  const [selectedQuality, setSelectedQuality] = useState('');
  const [selectedFile, setSelectedFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showAddPrinter, setShowAddPrinter] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isAgreed, setIsAgreed] = useState(false);
  const fileInputRef = useRef(null);

  useEffect(() => {
    const newSocket = io('http://83.221.210.29:5000');
    setSocket(newSocket);

    newSocket.on('connect', () => {
      console.log('Connected to server');
      newSocket.emit('get_printers');
    });

    newSocket.on('printers', (receivedPrinters) => {
      setPrinters(receivedPrinters);
    });

    newSocket.on('printer_added', (result) => {
      console.log('Printer added:', result);
      newSocket.emit('get_printers');
    });

    newSocket.on('print_added', (result) => {
      console.log('Print added:', result);
      if (result.defect === 1) {
        window.location.href = '/defect';
      } else if (result.defect === 0) {
        window.location.href = '/not-defect';
      }
    });

    return () => newSocket.close();
  }, []);

  useEffect(() => {
    const consent = Cookies.get('userConsent');
    if (consent) {
      setIsAgreed(true);
    }
  }, []);

  const getIdsFromCookie = () => {
    let ids = Cookies.get('ids');
    return ids ? ids.split(',') : [];
  }

  const handleQualitySelect = (quality) => {
    let qualityValue;
    switch (quality) {
      case '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,2 –º–º)':
        qualityValue = 1;
        break;
      case '–í—ã—Å–æ–∫–∏–π (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,1 –º–º)':
        qualityValue = 2;
        break;
      case '–£–ª—å—Ç—Ä–∞ (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,05 –º–º)':
        qualityValue = 3;
        break;
      default:
        qualityValue = '';
    }
    setSelectedQuality(qualityValue);
    console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:', qualityValue);
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file && (file.type === "image/jpeg" || file.type === "image/png" || file.type === "image/jpg")) {
      setSelectedFile(file);
      console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:', file);
      if (!isAgreed) {
        setIsModalOpen(true);
      } else {
        handleSubmit(file);
      }
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG, PNG –∏–ª–∏ JPG.');
    }
  };

  const resetFileInput = () => {
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    setSelectedFile(null);
  };

  const handlePrinterSelect = (e) => {
    const printerId = e.target.value;
    setSelectedPrinter(printerId);

    if (printerId === 'add-new') {
      setShowAddPrinter(true);
      document.body.classList.add('modal-open');
    } else {
      console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä ID:', printerId);
    }
  };

  const handleCloseModal = () => {
    setShowAddPrinter(false);
    document.body.classList.remove('modal-open');
  };

  const handleAddPrinter = (newPrinter) => {
    socket.emit('add_printer', newPrinter);
    handleCloseModal();
  };

  const handleAgree = () => {
    setIsAgreed(true);
    Cookies.set('userConsent', 'true', { expires: 365 });
    setIsModalOpen(false);
    if (selectedFile) {
      handleSubmit(selectedFile);
    }
  };

  const handleSubmit = async (file) => {
    setLoading(true);
    const formData = new FormData();
    formData.append('printer_id', selectedPrinter);
    formData.append('quality', selectedQuality);
    if (file) {
      formData.append('img', file);
    }

    socket.emit('add_print', formData);
    setLoading(false);
  };

  return (
    <>
      <Header />
      <main className="get-started-content">
        <div className="container">
          <div className="instruction-block">
            <h1>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</h1>
            <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å <a href={Mod} className="link" download="Model-Test.stl">Model-Test.stl</a> —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º –Ω–∞ —Å–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø–µ—á–∞—Ç–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–∞–π—Å–µ—Ä UltiMaker Cura. –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ 3D-–ø—Ä–∏–Ω—Ç–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –∏ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—á–∞—Ç–∏. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –æ—Ç–ø–µ—á–∞—Ç–∞–Ω–Ω—É—é –¥–µ—Ç–∞–ª—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞ —Å–∞–π—Ç.</p>
          </div>
          <div className="blockk">
            <div className="selection-block">
              <div className="printer-selection">
                <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä</p>
                <select onChange={handlePrinterSelect} value={selectedPrinter}>
                  {printers.map((printer) => (
                    <option key={printer.id} value={printer.id}>{printer.name}</option>
                  ))}
                  <option value="add-new">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä</option>
                </select>
              </div>
              <div className="quality-selection">
                {['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,2 –º–º)', '–í—ã—Å–æ–∫–∏–π (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,1 –º–º)', '–£–ª—å—Ç—Ä–∞ (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,05 –º–º)'].map((quality) => (
                  <div
                    key={quality}
                    className={`quality-block ${selectedQuality === quality ? 'active' : ''}`}
                    onClick={() => handleQualitySelect(quality)}>
                    <h3>{quality}</h3>
                    <p>{quality === '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,2 –º–º)' ? '–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º' : quality === '–í—ã—Å–æ–∫–∏–π (–í—ã—Å–æ—Ç–∞ —Å–ª–æ—è 0,1 –º–º)' ? '–ë–æ–ª–µ–µ –º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∏' : '–í—ã—Å–æ—á–∞–π—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è'}</p>
                  </div>
                ))}
              </div>
            </div>
            <div className="upload-block">
              <div className="upload-photo">
                <img src={require('../img/Rectangle 26.png')} alt="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å" />
              </div>
              <div className="upload-info">
                <p>–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à—É 3D –º–æ–¥–µ–ª—å –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —á–µ—Ç–∫–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º —Å–≤–µ—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞ –º–æ–¥–µ–ª–∏</p>
                <input
                  ref={fileInputRef}
                  className="upload-file"
                  onChange={handleFileChange}
                  type="file"
                  accept=".jpg, .jpeg, .png"
                />
              </div>
            </div>
          </div>
          {showAddPrinter && (
            <div className="modal-overlay">
              <div className="modal-content">
                <button className="close-button" onClick={handleCloseModal}>√ó</button>
                <div className="modal-body">
                  <AddPrinter onSave={handleAddPrinter} />
                </div>
              </div>
            </div>
          )}
          {isModalOpen && (
            <div className="modal-overlay">
              <div className="modal-content">
                <button className="close-button2" onClick={() => {
                  setIsModalOpen(false);
                  resetFileInput();
                }}>√ó</button>
                <h2>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h2>
                <p>–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è" –í—ã –¥–∞—ë—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ <a href="/consent" target="_blank" rel="noopener noreferrer">–æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>.</p>
                <button className="apply-button" onClick={handleAgree}>–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è</button>
              </div>
            </div>
          )}
          {loading && (
            <div className="popup">
              <div className="cont">
                <div className="üì¶"></div>
                <div className="üì¶"></div>
                <div className="üì¶"></div>
                <div className="üì¶"></div>
                <div className="üì¶"></div>
              </div>
            </div>
          )}
        </div>
      </main>
      <SupportChat />
    </>
  );
};

export default Started;
